let e=0;class t{constructor(){this.id=e++,this.subs=[]}depend(){t.target.addDep(this)}addSub(e){this.subs.push(e)}notify(){this.subs.forEach(e=>e.update())}}class r{constructor(e,t,r){this.depIds={},this.proxy=e,this.cb=r,this.expOrFn=t;const n=this.checkParam(e,t,r);this.val=this.get(n)}checkParam(e,t,r){return e._isObserved?"string"!=typeof t&&"function"!=typeof t?(console.warn(`Watcher need a expression or a function for arguments[1] but got a ${typeof t}.`),!1):"function"==typeof r||(console.warn(`Watcher need a function for arguments[2] but got a ${typeof r}.`),!1):(console.warn("Watcher need an observed object for arguments[0] but got other object,try to use observe method to get an observed object."),!1)}update(){this.run()}addDep(e){this.depIds.hasOwnProperty(e.id)||(e.addSub(this),this.depIds[e.id]=e)}run(){const e=this.get(!0);e!==this.val&&(this.cb.call(this.proxy,e,this.val),this.val=e)}get(e){if(!e)return;let r;if(t.target=this,"function"==typeof this.expOrFn)r=this.expOrFn();else if(this.expOrFn.includes(".")){r=this.expOrFn.split(".").reduce((e,t)=>e[t],this.proxy)}else r=this.proxy[this.expOrFn];return t.target=null,r}}let n=new WeakMap,o=new WeakMap;class s{constructor(e){this.value=e,this.dep=new t,this._proxy=this.proxy(e)}proxy(e){const s=this;let c=n.get(e);return c||(o.has(e)?(console.warn("proxy2Raw"),e):(c=new Proxy(e,{get(e,r,n){t.target&&s.dep.depend();const o=Reflect.get(e,r,n);return"object"==typeof o?i(o):o},set(e,t,r,n){!function(e,t){Object.prototype.hasOwnProperty.call(e,t)}(e,t);if(e[t]===(r=o.get(r)||r))return!0;const i=Reflect.set(e,t,r,n);return s.dep.notify(),i}}),c._isObserved=!0,c.watch=function(e,t){return new r(this,e,t)},n.set(e,c),o.set(c,e),c))}}function i(e){if(e&&"object"==typeof e)return new s(e)._proxy}function c(){}c.render=function(e,t){if(e&&1===e.nodeType){var n;if(n=t,"[object Object]"===Object.prototype.toString.call(n))return function(e,t){t._isObserved||(t=i(t));let n,o=document.createDocumentFragment();for(;n=e.firstChild;)o.appendChild(n);return function e(n){Array.from(n.childNodes).forEach(n=>{const o=n.textContent,s=/\{\{(.*?)\}\}/g;if(3===n.nodeType&&s.test(o)){!function e(i){n.textContent=o.replace(s,(n,o)=>{i===Symbol.for("replaceText")&&new r(t,o,e);const s=o.split(".").reduce((e,t)=>e[t],t);return s&&s.toString&&s.toString()})}(Symbol.for("replaceText"))}n.childNodes&&n.childNodes.length&&e(n)})}(o),e.appendChild(o),t}(e,t);console.warn("You should provide an plain object for argument[1]. (Silicagel.render)")}else console.warn("You should provide an element node for argument[0]. (Silicagel.render)")},c.observe=i,c.Watcher=r,module.exports=c;
